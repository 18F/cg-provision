jobs:
- name: pull-status-check
  plan:
  - get: pull-request
    version: every
    trigger: true
  - put: pull-request
    params:
      path: pull-request
      status: pending
  - task: validate-terraform
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: pull-request
      run:
        path: pull-request/validate.sh
    on_success:
      put: pull-request
      params:
        path: pull-request
        status: success
    on_failure:
      put: pull-request
      params:
        path: pull-request
        status: failure

- name: plan-bootstrap-external-staging
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-external-staging
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &external-staging-params
      TERRAFORM_ACTION: plan
      STACK_NAME: external-staging
      TEMPLATE_SUBDIR: terraform/stacks/external
      S3_TFSTATE_BUCKET: {{aws_external_s3_tfstate_bucket}}
      AWS_ACCESS_KEY_ID: {{aws_external_access_key_id}}
      AWS_SECRET_ACCESS_KEY: {{aws_external_secret_access_key}}
      AWS_DEFAULT_REGION: {{aws_external_region}}
      TF_VAR_stack_description: staging
      TF_VAR_aws_default_region: {{aws_external_region}}
      TF_VAR_cdn_broker_username: {{cdn_broker_username_staging}}
      TF_VAR_cdn_broker_bucket: {{cdn_broker_bucket_staging}}
      TF_VAR_cdn_broker_cloudfront_prefix: {{cdn_broker_cloudfront_prefix_staging}}
      TF_VAR_cdn_broker_hosted_zone: {{cdn_broker_hosted_zone_staging}}
  - &notify-slack
    put: slack
    params:
      text_file: terraform-state/message.txt
      text:  |
        :terraform: $BUILD_JOB_NAME needs review
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: bootstrap-external-staging
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      passed: [plan-bootstrap-external-staging]
  - task: create-update-external-staging
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *external-staging-params
      TERRAFORM_ACTION: apply
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - put: terraform-yaml-external-staging
    params:
      file: terraform-yaml/state.yml

- name: plan-bootstrap-external-production
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-external-production
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &external-production-params
      TERRAFORM_ACTION: plan
      STACK_NAME: external-production
      TEMPLATE_SUBDIR: terraform/stacks/external
      S3_TFSTATE_BUCKET: {{aws_external_s3_tfstate_bucket}}
      AWS_ACCESS_KEY_ID: {{aws_external_access_key_id}}
      AWS_SECRET_ACCESS_KEY: {{aws_external_secret_access_key}}
      AWS_DEFAULT_REGION: {{aws_external_region}}
      TF_VAR_stack_description: production
      TF_VAR_aws_default_region: {{aws_external_region}}
      TF_VAR_cdn_broker_username: {{cdn_broker_username_production}}
      TF_VAR_cdn_broker_bucket: {{cdn_broker_bucket_production}}
      TF_VAR_cdn_broker_cloudfront_prefix: {{cdn_broker_cloudfront_prefix_production}}
      TF_VAR_cdn_broker_hosted_zone: {{cdn_broker_hosted_zone_production}}
  - *notify-slack

- name: bootstrap-external-production
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      passed: [plan-bootstrap-external-production]
  - task: create-update-external-production
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *external-production-params
      TERRAFORM_ACTION: apply
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - put: terraform-yaml-external-production
    params:
      file: terraform-yaml/state.yml

- name: plan-dns
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-dns
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &dns-params
      TERRAFORM_ACTION: plan
      STACK_NAME: dns
      TEMPLATE_SUBDIR: terraform/stacks/dns
      S3_TFSTATE_BUCKET: {{aws_external_s3_tfstate_bucket}}
      AWS_ACCESS_KEY_ID: {{aws_external_access_key_id}}
      AWS_SECRET_ACCESS_KEY: {{aws_external_secret_access_key}}
      AWS_DEFAULT_REGION: {{aws_external_region}}
  - *notify-slack

- name: apply-dns
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      passed: [plan-dns]
  - task: create-update-external-staging
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *dns-params
      TERRAFORM_ACTION: apply

- name: plan-bootstrap-tooling
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-tooling
    tags:
    - iaas
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &tooling-params
      TERRAFORM_ACTION: plan
      STACK_NAME: tooling
      TEMPLATE_SUBDIR: terraform/stacks/tooling
      S3_TFSTATE_BUCKET: {{aws_s3_tfstate_bucket}}
      AWS_DEFAULT_REGION: {{aws_default_region}}
      TF_VAR_az1: {{aws_az1}}
      TF_VAR_az2: {{aws_az2}}
      TF_VAR_aws_default_region: {{aws_default_region}}
      TF_VAR_rds_password: {{tooling_rds_password}}
      TF_VAR_concourse_prod_rds_password: {{concourse_prod_rds_password}}
      TF_VAR_concourse_prod_cidr: {{concourse_prod_cidr}}
      TF_VAR_concourse_staging_rds_password: {{concourse_staging_rds_password}}
      TF_VAR_concourse_staging_cidr: {{concourse_staging_cidr}}
      TF_VAR_monitoring_staging_cidr: {{monitoring_staging_cidr}}
      TF_VAR_monitoring_production_cidr: {{monitoring_production_cidr}}
      TF_VAR_remote_state_bucket: {{aws_s3_tfstate_bucket}}
      TF_VAR_vpc_cidr: {{tooling_vpc_cidr}}
      TF_VAR_public_cidr_1: {{tooling_public_cidr_1}}
      TF_VAR_public_cidr_2: {{tooling_public_cidr_2}}
      TF_VAR_private_cidr_1: {{tooling_private_cidr_1}}
      TF_VAR_private_cidr_2: {{tooling_private_cidr_2}}
      TF_VAR_rds_private_cidr_1: {{tooling_rds_private_cidr_1}}
      TF_VAR_rds_private_cidr_2: {{tooling_rds_private_cidr_2}}
      TF_VAR_restricted_ingress_web_cidrs: {{tooling_restricted_ingress_web_cidrs}}
      TF_VAR_blobstore_bucket_name: bosh-tooling-blobstore
  - *notify-slack

- name: bootstrap-tooling
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      passed: [plan-bootstrap-tooling]
  - task: create-update-tooling
    tags:
    - iaas
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *tooling-params
      TERRAFORM_ACTION: apply
  - task: init-bosh-db
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: cg-provision-repo
      - name: terraform-state
      params:
        STATE_FILE_PATH: terraform-state/terraform.tfstate
      run:
        path: sh
        args:
        - -e
        - -c
        - cg-provision-repo/ci/scripts/update-bosh-db.sh
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - put: terraform-yaml-tooling
    params:
      file: terraform-yaml/state.yml

- name: plan-bootstrap-development
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-development
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-development
    tags:
    - iaas
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &development-params
      TERRAFORM_ACTION: plan
      STACK_NAME: development
      TEMPLATE_SUBDIR: terraform/stacks/main
      S3_TFSTATE_BUCKET: {{aws_s3_tfstate_bucket}}
      AWS_DEFAULT_REGION: {{aws_default_region}}
      TF_VAR_stack_description: development
      TF_VAR_force_restricted_network: "yes"
      TF_VAR_az1: {{aws_az1}}
      TF_VAR_az2: {{aws_az2}}
      TF_VAR_rds_password: {{development_rds_password}}
      TF_VAR_remote_state_bucket: {{aws_s3_tfstate_bucket}}
      TF_VAR_vpc_cidr: {{development_vpc_cidr}}
      TF_VAR_public_cidr_1: {{development_public_cidr_1}}
      TF_VAR_public_cidr_2: {{development_public_cidr_2}}
      TF_VAR_private_cidr_1: {{development_private_cidr_1}}
      TF_VAR_private_cidr_2: {{development_private_cidr_2}}
      TF_VAR_services_cidr_1: {{development_services_cidr_1}}
      TF_VAR_services_cidr_2: {{development_services_cidr_2}}
      TF_VAR_kubernetes_cluster_id: {{development_kubernetes_cluster_id}}
      TF_VAR_rds_private_cidr_1: {{development_rds_private_cidr_1}}
      TF_VAR_rds_private_cidr_2: {{development_rds_private_cidr_2}}
      TF_VAR_elasticache_private_cidr_1: {{development_elasticache_private_cidr_1}}
      TF_VAR_elasticache_private_cidr_2: {{development_elasticache_private_cidr_2}}
      TF_VAR_cf_rds_password: {{development_cf_rds_password}}
      TF_VAR_restricted_ingress_web_cidrs: {{development_restricted_ingress_web_cidrs}}
      TF_VAR_main_cert_name: star.dev.us-gov-west-1.aws-us-gov.cloud.gov-03-17
      TF_VAR_apps_cert_name: star.dev.us-gov-west-1.aws-us-gov.cloud.gov-03-17
      TF_VAR_elb_shibboleth_cert_name: star.dev.us-gov-west-1.aws-us-gov.cloud.gov-03-17
      TF_VAR_stack_prefix: cf-development
      TF_VAR_bucket_prefix: development-cg
      TF_VAR_blobstore_bucket_name: bosh-development-blobstore
      TF_VAR_upstream_blobstore_bucket_name: bosh-tooling-blobstore
      TF_VAR_use_nat_gateway_eip: "false"
  - *notify-slack

- name: bootstrap-development
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-development
      passed: [plan-bootstrap-development]
  - task: create-update-development
    tags:
    - iaas
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *development-params
      TERRAFORM_ACTION: apply
  - task: init-bosh-db
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: cg-provision-repo
      - name: terraform-state
      params:
        STATE_FILE_PATH: terraform-state/terraform.tfstate
      run:
        path: sh
        args:
        - -e
        - -c
        - cg-provision-repo/ci/scripts/update-bosh-db.sh
  - task: init-cf-db
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: cg-provision-repo
      - name: terraform-state
      params:
        STATE_FILE_PATH: terraform-state/terraform.tfstate
      run:
        path: sh
        args:
        - -e
        - -c
        - cg-provision-repo/ci/scripts/update-cf-db.sh
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - put: terraform-yaml-development
    params:
      file: terraform-yaml/state.yml

- name: plan-bootstrap-staging
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-staging
    tags:
    - iaas
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &staging-params
      TERRAFORM_ACTION: plan
      STACK_NAME: staging
      TEMPLATE_SUBDIR: terraform/stacks/main
      S3_TFSTATE_BUCKET: {{aws_s3_tfstate_bucket}}
      AWS_DEFAULT_REGION: {{aws_default_region}}
      TF_VAR_stack_description: staging
      TF_VAR_force_restricted_network: "no"
      TF_VAR_az1: {{aws_az1}}
      TF_VAR_az2: {{aws_az2}}
      TF_VAR_rds_password: {{staging_rds_password}}
      TF_VAR_remote_state_bucket: {{aws_s3_tfstate_bucket}}
      TF_VAR_vpc_cidr: {{staging_vpc_cidr}}
      TF_VAR_public_cidr_1: {{staging_public_cidr_1}}
      TF_VAR_public_cidr_2: {{staging_public_cidr_2}}
      TF_VAR_private_cidr_1: {{staging_private_cidr_1}}
      TF_VAR_private_cidr_2: {{staging_private_cidr_2}}
      TF_VAR_services_cidr_1: {{staging_services_cidr_1}}
      TF_VAR_services_cidr_2: {{staging_services_cidr_2}}
      TF_VAR_kubernetes_cluster_id: {{staging_kubernetes_cluster_id}}
      TF_VAR_rds_private_cidr_1: {{staging_rds_private_cidr_1}}
      TF_VAR_rds_private_cidr_2: {{staging_rds_private_cidr_2}}
      TF_VAR_elasticache_private_cidr_1: {{staging_elasticache_private_cidr_1}}
      TF_VAR_elasticache_private_cidr_2: {{staging_elasticache_private_cidr_2}}
      TF_VAR_cf_rds_password: {{staging_cf_rds_password}}
      TF_VAR_restricted_ingress_web_cidrs: {{staging_restricted_ingress_web_cidrs}}
      TF_VAR_main_cert_name: star-fr-stage-cloud-gov-2017-05
      TF_VAR_apps_cert_name: star-fr-stage-cloud-gov-2017-05
      TF_VAR_elb_shibboleth_cert_name: star-fr-stage-cloud-gov-2017-05
      TF_VAR_stack_prefix: cf-staging
      TF_VAR_bucket_prefix: staging-cg
      TF_VAR_blobstore_bucket_name: bosh-staging-blobstore
      TF_VAR_upstream_blobstore_bucket_name: bosh-tooling-blobstore
      TF_VAR_use_nat_gateway_eip: "true"
  - *notify-slack

- name: bootstrap-staging
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      passed: [plan-bootstrap-staging]
  - task: create-update-staging
    tags:
    - iaas
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *staging-params
      TERRAFORM_ACTION: apply
  - task: init-bosh-db
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: cg-provision-repo
      - name: terraform-state
      params:
        STATE_FILE_PATH: terraform-state/terraform.tfstate
      run:
        path: sh
        args:
        - -e
        - -c
        - cg-provision-repo/ci/scripts/update-bosh-db.sh
  - task: init-cf-db
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: cg-provision-repo
      - name: terraform-state
      params:
        STATE_FILE_PATH: terraform-state/terraform.tfstate
      run:
        path: sh
        args:
        - -e
        - -c
        - cg-provision-repo/ci/scripts/update-cf-db.sh
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - put: terraform-yaml-staging
    params:
      file: terraform-yaml/state.yml

- name: plan-bootstrap-production
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-production
    tags:
    - iaas
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &production-params
      TERRAFORM_ACTION: plan
      STACK_NAME: production
      TEMPLATE_SUBDIR: terraform/stacks/main
      S3_TFSTATE_BUCKET: {{aws_s3_tfstate_bucket}}
      AWS_DEFAULT_REGION: {{aws_default_region}}
      TF_VAR_stack_description: production
      TF_VAR_force_restricted_network: "no"
      TF_VAR_az1: {{aws_az1}}
      TF_VAR_az2: {{aws_az2}}
      TF_VAR_rds_password: {{production_rds_password}}
      TF_VAR_remote_state_bucket: {{aws_s3_tfstate_bucket}}
      TF_VAR_vpc_cidr: {{production_vpc_cidr}}
      TF_VAR_public_cidr_1: {{production_public_cidr_1}}
      TF_VAR_public_cidr_2: {{production_public_cidr_2}}
      TF_VAR_private_cidr_1: {{production_private_cidr_1}}
      TF_VAR_private_cidr_2: {{production_private_cidr_2}}
      TF_VAR_services_cidr_1: {{production_services_cidr_1}}
      TF_VAR_services_cidr_2: {{production_services_cidr_2}}
      TF_VAR_kubernetes_cluster_id: {{production_kubernetes_cluster_id}}
      TF_VAR_rds_private_cidr_1: {{production_rds_private_cidr_1}}
      TF_VAR_rds_private_cidr_2: {{production_rds_private_cidr_2}}
      TF_VAR_elasticache_private_cidr_1: {{production_elasticache_private_cidr_1}}
      TF_VAR_elasticache_private_cidr_2: {{production_elasticache_private_cidr_2}}
      TF_VAR_cf_rds_password: {{production_cf_rds_password}}
      TF_VAR_restricted_ingress_web_cidrs: {{production_restricted_ingress_web_cidrs}}
      TF_VAR_main_cert_name: star-fr-cloud-gov-2017-05
      TF_VAR_apps_cert_name: star-app-cloud-gov-2017-10
      TF_VAR_elb_shibboleth_cert_name: star-fr-cloud-gov-2017-05
      TF_VAR_18f_gov_elb_cert_name: star-18f-gov-04-17
      TF_VAR_stack_prefix: cf-production
      TF_VAR_bucket_prefix: cg
      TF_VAR_blobstore_bucket_name: bosh-prod-blobstore
      TF_VAR_upstream_blobstore_bucket_name: bosh-tooling-blobstore
      TF_VAR_use_nat_gateway_eip: "true"
  - *notify-slack

- name: bootstrap-production
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: cg-provision-repo
      passed: [plan-bootstrap-production]
  - task: create-update-production
    tags:
    - iaas
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *production-params
      TERRAFORM_ACTION: apply
  - task: init-bosh-db
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: cg-provision-repo
      - name: terraform-state
      params:
        STATE_FILE_PATH: terraform-state/terraform.tfstate
      run:
        path: sh
        args:
        - -e
        - -c
        - cg-provision-repo/ci/scripts/update-bosh-db.sh
  - task: init-cf-db
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: cg-provision-repo
      - name: terraform-state
      params:
        STATE_FILE_PATH: terraform-state/terraform.tfstate
      run:
        path: sh
        args:
        - -e
        - -c
        - cg-provision-repo/ci/scripts/update-cf-db.sh
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - put: terraform-yaml-production
    params:
      file: terraform-yaml/state.yml

# - name: teardown-tooling
#   plan:
#   - aggregate:
#     - get: pipeline-tasks
#     - get: cg-provision-repo
#       passed: [teardown-staging, teardown-production]
#   - task: destroy
#     file: pipeline-tasks/terraform-destroy.yml
#     input_mapping: { terraform-templates: cg-provision-repo }
#     params:
#       STACK_NAME: tooling
#       TEMPLATE_SUBDIR: terraform/stacks/tooling
#       S3_TFSTATE_BUCKET: {{aws_s3_tfstate_bucket}}
#       AWS_DEFAULT_REGION: {{aws_default_region}}
#       TF_VAR_az1: {{aws_az1}}
#       TF_VAR_az2: {{aws_az2}}
#       TF_VAR_account_id: {{aws_account_id}}
#       TF_VAR_rds_password: {{tooling_rds_password}}
#       TF_VAR_concourse_prod_rds_password: {{concourse_prod_rds_password}}
#       TF_VAR_concourse_prod_cidr: {{concourse_prod_cidr}}
#       TF_VAR_concourse_staging_rds_password: {{concourse_staging_rds_password}}
#       TF_VAR_concourse_staging_cidr: {{concourse_staging_cidr}}
#       TF_VAR_remote_state_bucket: {{aws_s3_tfstate_bucket}}
#       TF_VAR_vpc_cidr: {{tooling_vpc_cidr}}
#       TF_VAR_public_cidr_1: {{tooling_public_cidr_1}}
#       TF_VAR_public_cidr_2: {{tooling_public_cidr_2}}
#       TF_VAR_private_cidr_1: {{tooling_private_cidr_1}}
#       TF_VAR_private_cidr_2: {{tooling_private_cidr_2}}
#       TF_VAR_rds_private_cidr_1: {{tooling_rds_private_cidr_1}}
#       TF_VAR_rds_private_cidr_2: {{tooling_rds_private_cidr_2}}

# - name: teardown-staging
#   plan:
#   - aggregate:
#     - get: pipeline-tasks
#     - get: cg-provision-repo
#       passed: [bootstrap-staging]
#   - task: destroy
#     file: pipeline-tasks/terraform-destroy.yml
#     input_mapping: { terraform-templates: cg-provision-repo }
#     params:
#       STACK_NAME: staging
#       TEMPLATE_SUBDIR: terraform/stacks/staging
#       S3_TFSTATE_BUCKET: {{aws_s3_tfstate_bucket}}
#       AWS_DEFAULT_REGION: {{aws_default_region}}
#       TF_VAR_az1: {{aws_az1}}
#       TF_VAR_az2: {{aws_az2}}
#       TF_VAR_account_id: {{aws_account_id}}
#       TF_VAR_rds_password: {{staging_rds_password}}
#       TF_VAR_remote_state_bucket: {{aws_s3_tfstate_bucket}}
#       TF_VAR_vpc_cidr: {{staging_vpc_cidr}}
#       TF_VAR_public_cidr_1: {{staging_public_cidr_1}}
#       TF_VAR_public_cidr_2: {{staging_public_cidr_2}}
#       TF_VAR_private_cidr_1: {{staging_private_cidr_1}}
#       TF_VAR_private_cidr_2: {{staging_private_cidr_2}}
#       TF_VAR_rds_private_cidr_1: {{staging_rds_private_cidr_1}}
#       TF_VAR_rds_private_cidr_2: {{staging_rds_private_cidr_2}}

# - name: teardown-production
#   plan:
#   - aggregate:
#     - get: pipeline-tasks
#     - get: cg-provision-repo
#       passed: [bootstrap-production]
#   - task: destroy
#     file: pipeline-tasks/terraform-destroy.yml
#     input_mapping: { terraform-templates: cg-provision-repo }
#     params:
#       STACK_NAME: production
#       TEMPLATE_SUBDIR: terraform/stacks/production
#       S3_TFSTATE_BUCKET: {{aws_s3_tfstate_bucket}}
#       AWS_DEFAULT_REGION: {{aws_default_region}}
#       TF_VAR_az1: {{aws_az1}}
#       TF_VAR_az2: {{aws_az2}}
#       TF_VAR_account_id: {{aws_account_id}}
#       TF_VAR_rds_password: {{production_rds_password}}
#       TF_VAR_remote_state_bucket: {{aws_s3_tfstate_bucket}}
#       TF_VAR_vpc_cidr: {{production_vpc_cidr}}
#       TF_VAR_public_cidr_1: {{production_public_cidr_1}}
#       TF_VAR_public_cidr_2: {{production_public_cidr_2}}
#       TF_VAR_private_cidr_1: {{production_private_cidr_1}}
#       TF_VAR_private_cidr_2: {{production_private_cidr_2}}
#       TF_VAR_rds_private_cidr_1: {{production_rds_private_cidr_1}}
#       TF_VAR_rds_private_cidr_2: {{production_rds_private_cidr_2}}

resources:
- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline_tasks_git_url}}
    branch: {{pipeline_tasks_git_branch}}

- name: cg-provision-repo
  type: git
  source:
    uri: {{cg_provision_git_url}}
    branch: {{cg_provision_git_branch}}

- name: cg-provision-repo-development
  type: git
  source:
    uri: {{cg_provision_development_git_url}}
    branch: {{cg_provision_development_git_branch}}

- name: pull-request
  type: pull-request
  source:
    repo: {{cg_provision_git_repo}}
    access_token: {{status_access_token}}
    every: true

- name: terraform-yaml-tooling
  type: s3-iam
  source:
    bucket: {{aws_s3_tfstate_bucket}}
    versioned_file: {{tf_state_file_tooling}}
    region_name: {{aws_default_region}}

- name: terraform-yaml-development
  type: s3-iam
  source:
    bucket: {{aws_s3_tfstate_bucket}}
    versioned_file: {{tf_state_file_development}}
    region_name: {{aws_default_region}}

- name: terraform-yaml-staging
  type: s3-iam
  source:
    bucket: {{aws_s3_tfstate_bucket}}
    versioned_file: {{tf_state_file_staging}}
    region_name: {{aws_default_region}}

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: {{aws_s3_tfstate_bucket}}
    versioned_file: {{tf_state_file_production}}
    region_name: {{aws_default_region}}

- name: terraform-yaml-external-staging
  type: s3
  source:
    bucket: {{aws_external_s3_tfstate_bucket}}
    versioned_file: {{tf_state_file_external_staging}}
    access_key_id: {{aws_external_access_key_id}}
    secret_access_key: {{aws_external_secret_access_key}}
    region_name: {{aws_external_region}}

- name: terraform-yaml-external-production
  type: s3
  source:
    bucket: {{aws_external_s3_tfstate_bucket}}
    versioned_file: {{tf_state_file_external_production}}
    access_key_id: {{aws_external_access_key_id}}
    secret_access_key: {{aws_external_secret_access_key}}
    region_name: {{aws_external_region}}

- name: plan-timer
  type: time
  source:
    interval: 24h
    location: America/New_York

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: jtarchie/pr

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
